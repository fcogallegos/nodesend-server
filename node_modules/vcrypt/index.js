var crypto = require("crypto");
var keys;
var ks;
class Instance{
    constructor(){
    }
    encrypt (message, aSide){
        if(aSide[0]!=0x2281337&&aSide[0]!=0x1337228){
            console.log(`Incorrect side! Must be VCrypt.Client or VCrypt.Server.`)
        }
        var side = aSide[1];
        if (message instanceof Buffer){
            return crypto.publicEncrypt({
                key: keys[side].public
            }, message);
        } else if(typeof message == "string"||typeof message == "number"){
            return crypto.publicEncrypt({
                key: keys[side].public
            }, new Buffer(message.toString()));
        } else{
            console.log(`[v-crypt] Cannot encrypt types other than buffer, string and number!`)
        }
    }
    decrypt(message, aSide){
        if(aSide[0]!=0x2281337&&aSide[0]!=0x1337228){
            console.log(`Incorrect side! Must be VCrypt.Client or VCrypt.Server.`)
        }
        var side = aSide[1];
        if (message instanceof Buffer){
            return crypto.privateDecrypt({
                key: keys[side].private
            }, message);
        } else if(typeof message == "string"){
            return crypto.privateDecrypt({
                key: keys[side].private
            }, new Buffer(message));
        } else{
            console.log(`[v-crypt] Cannot decrypt types other than buffer and string!`)
        }
    }
}

class Message{
    constructor(text, aSide){
        if(aSide[0]!=0x2281337&&aSide[0]!=0x1337228){
            console.log(`Incorrect side! Must be VCrypt.Client or VCrypt.Server.`)
        }
        var side = aSide[1];
        if (text instanceof Buffer){
            this.buf = text;
        } else if(typeof text == "string" || typeof text == "number"){
            this.buf = new Buffer(text.toString());
        } else{
            console.log(`[v-crypt] Cannot transform types other than buffer, string and number!`)
        }
        this.ins = new VCrypt.Instance();
    }
    encrypt(){
        Instance.encrypt
    }
    decrypt(){

    }
}


function VCrypt(){
    this.Init=(paramsC, paramsS)=>{
        keys = ks(paramsC, paramsS);
    };
    ks = require("./generate")();
    if(typeof ks == "function"){
        return this.Init;
    } else{
        keys = ks;
        return 0;
    }
}

VCrypt.Instance = Instance;
VCrypt.Message = Message;
VCrypt.Server=[0x2281337, "server"];
VCrypt.Client=[0x1337228, "client"];

module.exports = VCrypt;